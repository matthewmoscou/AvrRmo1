7/189
9 * 5
8 * 5
40 * 52 * 0.1 * 3
218.4 - 160.4
install.packages(c("DESeq2"))
library(qtl)
sqrt(1.618)
1.618^2 - 1
1.6181^2 - 1
1.61819^2 - 1
1.61818^2 - 1
1.61817^2 - 1
1.61816^2 - 1
384*3*2
1091.54 / 4
50/1.3\
50/1.3
650/(3*3)
30470 / 1.28
(30470 * 4/3) / 1.28
(30470 * 1/3) / 1.28
37150 / 1.28
200 / 18
200 / 3
200 / 8
200 / 3
200 / 12
200 / 10
200 / 15
3 * 5 * 25
3 * 5 * 25 / 2
3 * 5 * 30 / 2
3 * 5 * 28 / 2
3 * 5 * 27 / 2
3 * 3 * 2 * 28
3 * 5 * 27
24 * 36 *20
24 * 36 * 20 * 0.05
8280 /  33232 * 864
495 * (2 / 3) * 0.5
63463 + 19336
1000 / 60
432-85
12.40 + 5.75 + 2.50
1557*10
1559/225
225/1559*1852
36/4
9/1.28
12000/295383
23783/295383
23783/37400
23783/374000
23783/308312
146754921324
source("https://raw.githubusercontent.com/fbreitwieser/pavian/master/inst/shinyapp/install-pavian.R")
pavian::runApp(port=5000)
source("https://raw.githubusercontent.com/fbreitwieser/pavian/master/inst/shinyapp/install-pavian.R")
options(repos = c(CRAN = "http://cran.rstudio.com"))
if (!require(remotes)) { install.packages("remotes") }
remotes::install_github("fbreitwieser/pavian")
pavian::runApp(port=5000)
250*.15
350*.15
1500000000*40
1500000000*10
340 / 370
library(ggplot2)
setwd("~/")
data= read.table(file="Emo_OND.clean_lengths.txt", header=T)
data[1,]
data = data.frame(data)
ggplot(data, aes(seqlen)) + geom_histogram()
ggplot(data, aes(seqlen)) + geom_histogram() + scale_y_log10()
max(data$seqlen)
ggplot(data, aes(seqlen)) + geom_histogram() + scale_y_sqrt()
quantile(data$seqlen)
len(data$seqlen)
length(data$seqlen)
ggplot(data, aes(seqlen)) + geom_histogram() + scale_x_continuous(limits = c(125000, 900000)) + scale_y_continuous(limits = c(0, 10000))
ggplot(data, aes(seqlen)) + geom_histogram() + scale_x_continuous(limits = c(125000, 900000)) + scale_y_continuous(limits = c(0, 100))
ggplot(data, aes(seqlen)) + geom_histogram() + scale_x_continuous(limits = c(125000, 900000)) + scale_y_continuous(limits = c(0, 25))
postscript(file="Emo_ONT_seqlen.eps", width=6, height=4)
ggplot(data, aes(seqlen)) + geom_histogram() + scale_y_log10()
dev.off()
postscript(file="Emo_ONT_seqlen_125k_900k.eps", width=3, height=2)
ggplot(data, aes(seqlen)) + geom_histogram() + scale_x_continuous(limits = c(125000, 900000)) + scale_y_continuous(limits = c(0, 20))
dev.off()
postscript(file="Emo_ONT_seqlen.eps", width=6, height=4)
ggplot(data, aes(seqlen)) + geom_histogram()
dev.off()
postscript(file="Emo_ONT_seqlen_log10.eps", width=6, height=4)
ggplot(data, aes(seqlen)) + geom_histogram() + scale_y_log10()
dev.off()
sum(data$seqlen)
sum(data$seqlen) / 800000000
sum(data$seqlen) / 1600000000
ggplot(data, aes(seqlen)) + geom_violin()
14.602 * (27/50)
14.602 * (39/50)
14.602 * (206/50)
14.602 * (222/50)
222 - 39
300 * 250 / 1.27
10000 / 1.27
10000 / 1.27 / 2
10000 / 1.27 * 2/3
5249 + 59055
8537*1.2
54.3/79.1
15000*13
3*12
library(BALCONY)
(10/230)*300
library(ggplot2)
?pie
pie(c(55,3,1))
pie(c(55,3,1), labels=c("Exo70F1", "Exo70FX2", "Exo70F2"), col=c("#56B4E9", "#D55E00", "#E69F00"))
pie(c(55,3,1), labels=c("Exo70F1", "Exo70FX2", "Exo70F2"), col=c("#56B4E9", "#D55E00", "#F0E442"))
postscript(file="Exo70_distribution.eps", width=4, height=4)
pie(c(55,3,1), labels=c("Exo70F1", "Exo70FX2", "Exo70F2"), col=c("#56B4E9", "#D55E00", "#F0E442"))
dev.off()
18*3
3 * 3* 3 * 2
28*3*2*3
504*250
504*220
504*220 / 1.25
96*4*7
1 - (0.3819 + 0.086)
postscript(file="FxC_RIL_pCOL.ps")
pie(c(0.3819,0.086, 0.5321), col=c("#E69F00","#56B4E9","grey"), labels=NA)
dev.off()
postscript(file="WBDC085xM_F2_CHL.ps")
pie(c(0.275,0.0,0.625), col=c("#56B4E9","#F0E442","grey"), labels=NA)
dev.off()
postscript(file="WBDC085xM_F2_pCOL.ps")
pie(c(0.26,0.0,0.74), col=c("#56B4E9","#F0E442","grey"), labels=NA)
dev.off()
1.15+3.29
1.66+2.8
install.packages("lubridate")
install.packages("ggplot2")
install.packages("data.table")
install.packages("ggrepel")
install.packages("dplyr")
install.packages("tidyverse")
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(ggrepel)
library(tidyverse)
library("ggmap")
install.packages(c("ggmap"))
library("ggmap")
us <- c(left = -125, bottom = 25.75, right = -67, top = 49)
get_stamenmap(us, zoom = 5, maptype = "toner-lite") %>% ggmap()
ggmap()
?ggmap
ggmap(get_map(maptype = "satellite"), extent = "device") +
stat_density2d(aes(x = lon, y = lat, colour = class), data = chkpts, bins = 5)
?register_google
register_google(key="AIzaSyDt0jVD-Zw-xhFiVzfMHxUOqhkj0vMjaec")
ggmap(get_map(maptype = "satellite"), extent = "device") +
stat_density2d(aes(x = lon, y = lat, colour = class), data = chkpts, bins = 5)
hdf <- get_map("houston, texas")
ggmap(hdf, extent = "normal")
ggmap(hdf) # extent = "panel", note qmap defaults to extent = "device"
ggmap(hdf, extent = "device")
# make some fake spatial data
mu <- c(-95.3632715, 29.7632836); nDataSets <- sample(4:10,1)
chkpts <- NULL
for(k in 1:nDataSets){
a <- rnorm(2); b <- rnorm(2);
si <- 1/3000 * (outer(a,a) + outer(b,b))
chkpts <- rbind(
chkpts,
cbind(MASS::mvrnorm(rpois(1,50), jitter(mu, .01), si), k)
)
}
chkpts <- data.frame(chkpts)
names(chkpts) <- c("lon", "lat","class")
chkpts$class <- factor(chkpts$class)
qplot(lon, lat, data = chkpts, colour = class)
# show it on the map
ggmap(hdf, extent = "normal") +
geom_point(aes(x = lon, y = lat, colour = class), data = chkpts, alpha = .5)
get_map()
?ggmap
library(ggmap)
library(ggplot2)
library(dplyr)
library(PBSmapping) # to clip polygons
require(ggthemes) # for theme_map, if desired
# define data (a simple dataset is constructed here
# for illustration purposes) and background map
countryData<-data.frame(region=factor(c("France", "Germany", "Libya")), data=c(2, 15, 1))
nMap <- get_map("Vienna, Austria",zoom=4,maptype="toner",source="stamen")
#get country polygon data
mapdata <- map_data("world")
mapdata <- left_join(mapdata, countryData, by="region")
#get bounding box for map
bb<-attr(nMap, "bb");
ylim<-c(bb$ll.lat, bb$ur.lat)
xlim<-c(bb$ll.lon, bb$ur.lon)
#clip polygons to map
colnames(mapdata)[1:6] <- c("X","Y","PID","POS","region","subregion")
mapdata<-clipPolys(mapdata, xlim=xlim, ylim=ylim, keepExtra=TRUE)
#plot map overlay
ggmap(nMap)+coord_map(xlim=xlim,ylim=ylim) + geom_polygon(data=mapdata, aes(x=X, y=Y, group=PID, fill=data), alpha=0.5) + ggthemes::theme_map()
nMap <- get_map("Vienna, Austria",zoom=4,maptype="toner",source="stamen")
788.83+27.81+63.08
data = c(2, 2, 5, 2, 2, 4, 5, 6, 2, 3, 2, 4, 1, 1, 1, 1, 2, 2, 7, 4, 1, 2, 2, 4, 1, 2, 3, 2, 1, 4, 2, 3, 5, 3, 2, 3, 3, 3, 1, 5, 2, 4, 5, 3, 1, 3, 1, 5, 1, 7, 1, 1, 2, 2, 2, 3, 4, 5, 2, 6, 2, 2, 6, 3, 1, 5, 2, 4, 1, 1, 1, 1, 1, 1, 4, 1, 1, 2, 5, 1, 4, 4, 3, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 3)
hist(data)
hist(data, breaks=20, col="red")
24 / (351+24)
621/4
1119/3
1119.0/3
7805/9
506/24
8435/24
library(qtl)
?qtl
?scanone
6000 / 60
888210-255151
8416692978 / 50000000
8416692978 / 5000000000
11257175152 / 50000000
47/(47+25)
5/72
3000/50
225/32
225/32 * 1600
161/3
96 + 79 + 53 + 161
389 / 918
7330.88 / (99 ^ 2)
log(7330.88 / (99 ^ 2))
log
log(7330.88 / (99 ^ 2), base=15)
setwd("~/Desktop/MoKen5420/jellyfish/")
library(ggplot2)
data = read.table(file="MoKen5420_jellyfish_17mer.histo.ID", header=T)
data = data.frame(data)
postscript(file="MoKen5420_jellyfish_17mer_distribution.ps", width=6, height=4)
ggplot(data, aes(k, count)) + geom_point() + xlim(c(4,400)) + ylim(c(0,3e6)) + xlab("Frequency") + ylab("Total counts")
dev.off()
data = read.table(file="MoKen5420m1_jellyfish_17mer.histo.ID", header=T)
data = data.frame(data)
postscript(file="MoKen5420m1_jellyfish_17mer_distribution.ps", width=6, height=4)
ggplot(data, aes(k, count)) + geom_point() + xlim(c(4,400)) + ylim(c(0,3e6)) + xlab("Frequency") + ylab("Total counts")
dev.off()
data = read.table(file="MoKen5420_jellyfish_17mer.histo.ID", header=T)
data = data.frame(data)
postscript(file="MoKen5420_jellyfish_17mer_distribution.ps", width=6, height=4)
ggplot(data, aes(k, count)) + geom_point() + xlim(c(6,400)) + ylim(c(0,1e6)) + xlab("Frequency") + ylab("Total counts")
dev.off()
data = read.table(file="MoKen5420m1_jellyfish_17mer.histo.ID", header=T)
data = data.frame(data)
postscript(file="MoKen5420m1_jellyfish_17mer_distribution.ps", width=6, height=4)
ggplot(data, aes(k, count)) + geom_point() + xlim(c(6,400)) + ylim(c(0,1e6)) + xlab("Frequency") + ylab("Total counts")
dev.off()
